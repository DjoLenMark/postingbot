import os
import logging
import asyncio
from aiohttp import web
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CallbackQueryHandler,
    MessageHandler, CommandHandler, filters
)
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞
user_post_data = {}

# ==== –®–ê–ì 1: –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ï–î–ò–ê ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_post_data[update.effective_user.id] = {"step": 1}
    await update.message.reply_text("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏/–∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞")

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    state = user_post_data.get(uid, {})
    if state.get("step") != 1:
        return

    text = update.message.caption or update.message.text or ""
    photo = update.message.photo[-1].file_id if update.message.photo else None
    video = update.message.video.file_id if update.message.video else None

    user_post_data[uid].update({"text": text, "photo": photo, "video": video, "step": 2})
    await send_calendar(update, context)

# ==== –®–ê–ì 2: –ö–ê–õ–ï–ù–î–ê–†–¨ ====
async def send_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    keyboard = []
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in week_days])

    for i in range(0, 42):
        day = now + timedelta(days=i)
        button = InlineKeyboardButton(str(day.day), callback_data=f"date:{day.strftime('%d.%m.%Y')}")
        if i % 7 == 0:
            keyboard.append([])
        keyboard[-1].append(button)

    keyboard.append([
        InlineKeyboardButton("üìÖ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_date"),
        InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="now")
    ])

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üóì –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ==== –®–ê–ì 3: –í–´–ë–û–† –ü–õ–ê–¢–§–û–†–ú ====
PLATFORMS = ["Telegram", "VK", "Instagram", "YouTube", "Tilda"]

async def ask_platforms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_post_data[uid]["step"] = 3
    selected = user_post_data[uid].get("platforms", [])

    buttons = []
    for platform in PLATFORMS:
        selected_marker = "‚úÖ" if platform in selected else "‚ûï"
        buttons.append(
            InlineKeyboardButton(f"{selected_marker} {platform}", callback_data=f"platform:{platform}")
        )

    buttons.append(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_platforms"))
    rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(rows)
    )

# ==== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = query.from_user.id
    await query.answer()

    if query.data.startswith("date:"):
        user_post_data[uid]["date"] = query.data.split(":")[1]
        await query.edit_message_text(f"üóì –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {user_post_data[uid]['date']}")
        await ask_platforms(update, context)

    elif query.data.startswith("platform:"):
        platform = query.data.split(":")[1]
        selected = user_post_data[uid].get("platforms", [])
        if platform in selected:
            selected.remove(platform)
        else:
            selected.append(platform)
        user_post_data[uid]["platforms"] = selected
        await ask_platforms(update, context)

    elif query.data == "confirm_platforms":
        post = user_post_data.get(uid, {})
        result = "üéâ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!

"
        result += f"üìÑ –¢–µ–∫—Å—Ç: {post.get('text', '')}
"
        result += f"üìÜ –î–∞—Ç–∞: {post.get('date', '–°–µ–π—á–∞—Å')}
"
        result += f"üì≤ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(post.get('platforms', []))}"
        await query.edit_message_text(result)
        await context.bot.send_message(chat_id=uid, text="üîÅ –ù–æ–≤—ã–π –ø–æ—Å—Ç", reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")
        ]]))

    elif query.data == "new_post":
        user_post_data[uid] = {"step": 1}
        await context.bot.send_message(chat_id=uid, text="üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏/–∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")

# ==== PING-SERVER ====
async def handle_ping(request):
    return web.Response(text="pong")

async def start_ping_server():
    app = web.Application()
    app.add_routes([web.get("/", handle_ping), web.get("/ping", handle_ping)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()
    logging.info("üöÄ AIOHTTP ping-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

# ==== MAIN ====
async def main():
    await start_ping_server()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.VIDEO, handle_media))
    app.add_handler(CallbackQueryHandler(button_handler))
    logging.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
